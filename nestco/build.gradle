plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// devtools
	implementation 'org.springframework.boot:spring-boot-devtools'

	// 파일처리 의존성 주입(다중 멀티 파일)
	implementation 'commons-io:commons-io:2.15.0'
	implementation 'commons-fileupload:commons-fileupload:1.5'

	// 일반 socket.server사용(간단한 로직 사용시) -> 자바의 버전 호환성 체크 필요

	//  Socket.IO의 하위 레이어로서, WebSocket 프로토콜과 HTTP 장기 폴링 같은 트랜스포트 메커니즘을 처리
//	implementation 'io.socket:engine.io-server:6.3.2'

	//실시간, 양방향 통신을 제공하는 자바스크립트 라이브러리
//	implementation 'io.socket:socket.io-server:4.1.2'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
//	implementation 'org.springframework.boot:spring-boot-starter-jetty'
	// netty사용(대용량 Java사용시)
//	implementation 'com.corundumstudio.socketio:netty-socketio:2.0.11'

	//GSON
	implementation 'com.google.code.gson:gson:2.11.0'

	// jsp
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:10.1.19'

	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'

	runtimeOnly 'com.mysql:mysql-connector-j'

	//QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.springframework.boot:spring-boot-starter-mail'

	implementation 'com.github.iamport:iamport-rest-client-java:0.1.6'

	implementation 'net.nurigo:sdk:4.3.0'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
}

tasks.named('test') {
	useJUnitPlatform()
}

clean {
	delete file('src/main/generated')
}

